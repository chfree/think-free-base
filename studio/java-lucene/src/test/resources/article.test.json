[
  {
    "id": "001",
    "title": "Java 近期新闻：虚拟线程、JReleaser 1.0、Loom 项目、关于 Spring4Shell 的供应商声明",
    "summary": "Java 近期新闻综述，包括来自 OpenJDK、JEP 425、JDK 19、Loom 项目的 19-loom+5-429 构建版本、Jakarta EE Starter 实用程序、Spring 里程碑及小版本、Payara 和 JetBrains 关于 Spring4Shell 的声明、JReleaser 1.0、Helidon 2.5.0、JHipster 7.8.1、Hibernate Search 6.1.4、Kotlin 1.6.20 和 JDKMon 17.0.24 等的新特性。",
    "content": "OpenJDK\nJEP 425，虚拟线程（预览版），从其 JEP 草案（Draft）8277131提升为候选（Candidate）状态。 该 JEP 将虚拟线程引入到 Java 平台中，这是一种轻量级线程，可以极大地减少编写、维护及观测高吞吐量并发应用程序的工作量。\n\n \n\nJEP 草案 8284289，获取异步调用跟踪分析的改进方式，这是一个特性 JEP 类型，它定义了一个高效的 API，用于从带有 Java 和本机帧信息的信号处理程序中获取异步调用跟踪信息以进行分析。\n\n \n\nJEP 草案 8284453，在JFR中可选的记录线程上下文（Optionally Record Thread Context in JFR），这是一个特性 JEP 类型，它建议增加将用户定义的相关事件上下文附加到现有的标准 JFR 堆栈跟踪、线程 ID 和时间事件中的能力。\n\n \n\nJDK 19\n甲骨文（Oracle）的 Java 平台组首席架构师Mark Reinhold对 JDK 19 的发布提议了以下的时间表：\n\n \n\n2022 年 6 月 9 日：Rampdown 第一阶段（从主干源码库分支创建）\n\n2022 年 7 月 21 日：Rampdown 第二阶段\n\n2022 年 8 月 11 日：首次发布候选版本\n\n2022 年 8 月 25 日：最终发布候选版本\n\n2022 年 9 月 20 日：正式发布\n\n \n\n该提案在 2022 年 4 月 13 日之前将继续接受审查以征求意见，直到最终确定。目前，JDK 19 只有一个新特性，JEP 422：Linux/RISC-V移植。\n\n \n\nJDK 19早期访问构建版本的第17版已于上周发布，其中包括对第 16 版中各种问题的修复及更新。更多详细信息请参阅发布说明。\n\n \n\n对于JDK 19，鼓励开发人员通过Java缺陷数据库来报告缺陷。\n\n \n\nLoom 项目\nLoom 项目的早期访问构建版本的 19-loom+5-429 版已经面向 Java 社区发布，它是基于 JDK 19 早期访问构建版本的第16版的。这个最新版本的特性是对ForkJoinPool 类进行了更新，这样可以提高在消息传递等情况下性能。\n\n \n\nJakarta EE Starter\nJakarta EE Ambassadors已经推出了Jakarta Starter实用程序的 1.0 版，这是一个 Maven 原型，可以生成示例代码以构建简单的 Jakarta EE 微服务项目。Jakarta Starter 已经在 JDK 8、JDK 11 和 JDK 17 上测试过了，它需要 Maven 3+。\n\n \n\nSpring 框架\n在通往代号为 Kilburn 的Spring Cloud 2022.0.0 的道路上，第二个里程碑版本已经发布，其中包括对其子项目的一系列的改进、缺陷修复和依赖升级：Spring Cloud Stream、Spring Cloud Config、 Spring Cloud Kubernetes、Spring Cloud Contract、Spring Cloud Gateway、Spring Cloud Function、Spring Cloud Commons。然而，也有一些破坏性的变更。Spring Cloud 2022.0.0-M2 与Spring Boot 3.0.0-M2 兼容。有关该版本的更多详细信息，请参阅发布说明。\n\n \n\nSpring Cloud Data Flow 2.9.4 已经发布，它解决了漏洞CVE-2022-22965（又名 Spring4Shell）和CVE-2021-29425。还对 Spring Boot 2.5.12 进行了依赖项升级。有关该版本的更多详细信息，请参阅发布说明。\n\n \n\n关于 Spring4Shell 漏洞的供应商声明\nPayara 关于 Payara 平台的声明：\n\n \n\n2022 年 3 月在 Spring Java 框架中检测到的远程代码执行（RCE）漏洞（被标记为 CVE-2022-22965）不太可能影响使用 Payara 平台的用户。\n\n \n\n然而，在 Payara Server 中部署 Spring Framework WAR 打包应用程序的用户会受到这个漏洞的影响，因为 Payara Server 在其 Servlet 实现（即 Catalina）中共享了代码片段，该实现最初是从 Apache Tomcat 分支出来的。\n\n \n\n为了降低此漏洞的影响风险，我们实施了一个紧急修复，该修复可以有效地禁用 Catalina 相应模块中受影响的代码。该修复将被包含在即将发布的 Payara 社区版（5.2022.2）和 Payara 企业版（5.38）中。\n\n \n\nJetBrains 关于 JetBrains 产品的声明：\n\n \n\n我们与产品团队一起对 JetBrains Web 应用程序进行了审计，包括的产品有：YouTrack、Hub、TeamCity、Space, Datalore, 服务有: JetBrains Website和JetBrainsAccount。\n\n \n\n上面列出的应用程序都没有使用易受攻击的 Spring 版本，或者不符合已知的攻击标准，因此不受已发现的安全问题的影响。请参考以下有关TeamCity、Hub和YouTrack的技术讨论。\n\n \n\nJReleaser\n在JReleaser初始版本0.1.0发布后的一周年之际，预期内的 1.0 版本也已发布，它附带了许多新特性，比如：基于发布者的下载 URL 添加格式化功能；允许使用 appName 和 appVersion 属性的命名模板；可跳过模板文件的选项；并添加了一个 packageVersion 属性来解决 Chocolate 的版本方案问题。\n\n \n\n关于这个版本的更多详细信息可以查看变更日志，与 JReleaser 的创建者Andres Almiray的采访问答可以查看InfoQ新闻报道。\n\n \n\nHelidon\n甲骨文（Oracle）发布了Helidon 2.5.0，它提供了以下特性：改进的 Oracle 云基础设施（Oracle Cloud Infrastructure，OCI）的 Java SDK 支持；改进了 JAX-RS 的实现，以支持 @Path 注解；以及一些缺陷修复和依赖升级。有关该版本的更多详细信息，请参阅发布说明。\n\n \n\nJHipster\n在7.8.0版本发布了一周之后，JHipster的 7.8.1 版发布了，其中包括：许多库的升级；并修复了CVE-2022-24815漏洞，即在创建带有响应式 SQL 后端的应用程序时进行 SQL 注入的漏洞。有关该版本的更多详细信息请参阅变更日志。\n\n \n\nHibernate\nHibernate Search 6.1.4.Final已发布，其特性包括：对Hibernate ORM 6.0.0.Final 和Hibernate Commons Annotations 6.0.0.Final 的-orm6 构件进行了升级；将 -orm6 和 -Jakarta 构件的 Jakarta 依赖项升级至最新版本；在 Lucene 后端的多个查询中使用 SearchSort 接口实例，以消除副作用；以及一个对 Elasticsearch 后端的修复，在该后端中，对从未被索引的动态字段进行了排序。\n\n \n\nKotlin\nJetBrains发布了Kotlin 1.6.20，其特性包括：支持在Kotlin/JVM中定义上下文相关的声明；改进了与通用 Java 类和接口的互操作性；在 JVM IR 后端并行编译单个模块，从而加快了构建时间；通过Kotlin/JS IR 中的增量编译，简化了开发体验；Kotlin/Native性能的改进；由于多平台项目的层次结构，改进了代码共享。有关该版本的更多详细信息，请参阅InfoQ的新闻报道。\n\n \n\nJDKMon\n最新版本的JDKMon是一个监控和更新已安装 JDK 的新工具，已面向 Java 社区发布。它由 Azul 的首席工程师Gerrit Grunwald创建，版本 17.0.24 附带的特性包括：与 JDKMon 的 Linux 版本相关的修复，以及 CVEs 指示符的替换。OpenJDK 版本的 Ubuntu 版本将被检测，但是在Disco API中不支持更新。",
    "tag": ["java", "language", "OpenJDK","JDK", "Loom"],
    "url": "https://www.infoq.cn/article/5bSzES5j1o4EStydDjAQ",
    "publishDate": "2022-04-15",
    "status": "01",
    "src": "infoq"
  },
  {
    "id": "002",
    "title": "为什么每一名程序员都应该学习 C++？",
    "summary": "通常，程序员在他们的编程生涯中会使用多种编程语言。然而，我们也看到，有些程序员一直在使用同一种编程语言。例如，我们经常遇到有几十年经验的 Java 专家和 C# 专家。但是，学习多种语言会使你在软件开发生涯中更加自信和娴熟。例如，如果你掌握了 Go 语言，你就会了解几个令人印象深刻的语言设计概念，提高自己的通用编程技能。",
    "content": "掌握 C++ 可不容易，但一旦你掌握了，就会获得丰厚的回报。\n\n\n通常，程序员在他们的编程生涯中会使用多种编程语言。然而，我们也看到，有些程序员一直在使用同一种编程语言。例如，我们经常遇到有几十年经验的 Java 专家和 C# 专家。但是，学习多种语言会使你在软件开发生涯中更加自信和娴熟。例如，如果你掌握了 Go 语言，你就会了解几个令人印象深刻的语言设计概念，提高自己的通用编程技能。\n\n\n\n学习 Python 也很好，因为我们可以用 Python 知识来编写任何自动化脚本，而且很有成效。学习一种新的编程语言无疑会给我们带来独特的经验和新的技术专长。与其他流行的编程语言相比，C++ 语言能带给我们许多好处。与其他现代语言不同，学习 C++ 确实不容易，很费时间。因此，现在大多数程序员都跳过了 C++ 的学习，并且更喜欢那些提供更抽象的开发环境的现代语言。\n\n\n\n我将解释一下，为什么学习 C++ 是所有努力成为编程专家的程序员的必修课。\n\nC++ 激励你学习计算机科学基础知识\n\n\n每一个技术上合理的软件程序背后，都可以找出几个核心的计算机科学理论。例如，Git 程序使用了图论、散列和许多基本的计算机科学算法。例如，以下是 Git 代码库中的合并排序实现：\n\n\n\n\nGit 中的合并排序实现，作者截图\n\n\n\n如今，每个商业实体通常都会向云计算生态系统发展，并努力实现业务流程的自动化。因此，现在大多数程序员通过编程解决商业问题，而不是与计算机科学相关的问题。\n\n\n\n但是，即使是从事面向商业的软件开发项目，他们也经常要运用计算机科学理论来编写更好的代码，使软件更有效率。因此，对每个程序员来说，计算机科学理论知识都是必不可少的。\n\n\n\n毫无疑问，C++ 是一种高级语言，它提供了比 C 语言更高级、对人更友好的抽象。但是，C++ 鼓励人们像 C 语言一样使用指针和手动管理内存。另外，C++ 标准库的设计注重计算机科学概念、性能和灵活性，而不是仅仅注重开发的便利性。因此，当你学习 C++ 时，会无意中学习到计算机科学的基础知识。\n\n使用 C++ 构建轻量级、高性能、简单的解决方案\n\n\n大多数现代编程语言专注于用类似伪代码的语法来隐藏底层技术细节，而在性能、轻量化和灵活性方面考虑不多。但是，C++ 仍然可以生成轻量级的二进制文件，是编写性能优先的软件系统的最佳选择。\n\n\n\n像 Golang 这样符合现代潮流的编程语言，通过提供类似 C 语言的最小语法和自动内存管理（通过垃圾收集）与 C++ 竞争。但是，Go 会生成很大的二进制文件，所以它不适合于轻量级的场景。这就是为什么大多数程序员使用 Go 来构建高性能的云工具，因为对云环境来说，二进制文件的大小并不是问题。在高性能、轻量级的软件开发方面，程序员仍然喜欢用 C++ 而不是 Go。\n\n\n\nGo 通常是静态链接标准库实现，当我们导入 fmt 时，它会将一个 1.2MB 的 Go 最小二进制文件增加到 1.8MB。C++ 通常是动态链接，当我们包含 iostream 时，它会将一个 16.5KB 的最小二进制文件增加到 17.3KB。在 GNU/Linux 平台上，Go 二进制文件大小增加了 50%，而 C++ 二进制文件大小增加了不到 5%。\n\n\n\n上述简单的实验证明，C++ 更适合于高性能、轻量级的软件开发。C++ 是一种复杂的全加载语言，但通过选择自己偏好的特性，你仍然可以编写出最小的代码。下面这篇文章将帮助你练习用任何编程语言编写最小的代码：帮助你编出更好代码的 5 个编程原则。\n\nC++ 技巧能让你更快地学习其他编程\n\n\n语言程序员根据自己的喜好学习各种编程语言。有些程序员在开始从事企业级软件开发项目时学习编程语言。同时，有些程序员倾向于把学习编程语言作为一种业余爱好。有些语言很容易掌握，有些则需要不断的试验来获得进一步的经验。\n\n\n\n由于复杂的语法（C++ 有 60 个关键词）、多功能的标准库、面向硬件的开发环境以及鲜为人知的最佳实践，C++ 需要更多的时间来获得专业工作经验。C++ 是一种多范式、多功能的编程语言。换句话说，你可以在用 C++ 编写代码时制定自己的编程风格和最佳实践。\n\n\n\n学习 C++ 标准库和开发模式需要扎实的计算机科学知识和技术能力。因此，当你精通 C++ 时，学习一门新语言就是小菜一碟。\n\n与操作系统 API 交互的最佳语言\n\n\n每个操作系统都为开发者提供了一个可编程接口，用于处理操作系统级的操作，如进程管理、文件处理、GUI 渲染和网络请求处理（通过套接字）。所有这些 API 都暴露了基于 C/C++ 的接口，因为每个操作系统都是用 C/C++ 编写的。\n\n\n\nGNU/Linux 系统以 C 语言头文件的形式提供 Unix 风格的 API 和 GTK GUI 库。MacOS 也提供 Objective-C 接口，我们可以通过 Apple Clang LLVM 编译器来使用。因此，我们可以用 C++ 直接访问任何操作系统级的 API，因为 C++ 是 C 的超集，而且苹果编译器允许开发者混合使用 C++ 和 Objective-C。例如，请看 Electron 如何在 C++ 源文件中使用 GTK C 头文件：\n\n\n\n\nElectron 中的文件选择对话框源代码，作者截图\n\n\n\n另一方面，其他所有的编程语言都需要特定语言的绑定来访问操作系统的 API。由于这个原因，几乎所有的操作系统级框架都是用 C++ 编写的。看看下面这些基于 C++ 的框架：\n\n\n\nElectron\n\nReact Native\n\nFlutter\n\nNeutralinojs\n\n\n\n另外，像 Chromium、Firefox、Tensorflow、LLVM 和 V8 这样的大型软件项目也使用 C++ 作为主要的开发语言。\n\nC++ 知识有助于你做出更好的技术决策\n\n\n程序员不仅按照规范编写代码，他们还设计软件系统及组织项目结构。设计阶段在软件开发中非常重要，因为它为整个软件系统奠定了基础。我们经常要在设计阶段和开发阶段做出技术决策。\n\n\n\nC++ 是一种复杂的语言——你有许多方法来解决同一个编程问题。另外，C++ 被设计成一门速度很快的语言，但让程序员可以充分控制程序的执行，按照自己的意愿优化代码。因此，你需要谨慎地作出技术决策，根据自己的偏好，为自己的需求选择最佳的 C++ 特性。\n\n\n\nC++ 是一种多范式语言，尽管大家都知道它是一种基于 OOP 的语言。一些程序员使用 C++ 编程时会采用传统的 OOP 范式。同时，有些程序员使用 C++ 编程时会采用过程以及函数编程范式。有时，我们经常不得不避免使用一些 C++ 特性，以便简化我们的源代码。例如，谷歌的 C++ 风格指南建议不要使用 C++ 异常。所有这些情况都能提高我们的技术决策能力。\n\n小结\n\n\n我们已经讨论了在编程生涯中学习 C++ 的好处。目前有二十多种稳定的、功能齐全的、流行的编程语言。没有一种编程语言被称为“最好的编程语言”——每一种编程语言都在特定领域有着良好的表现。因此，学习五种自己喜欢的、精心挑选的编程语言，并称它们为“我最好的编程语言”，是一个明智的决定。\n\n\n\n如果你仔细挑选五种编程语言，从各方面进行考虑——毫无疑问，C/C++ 也会在你的名单上。我在这篇文章里介绍了我最喜欢的编程语言：每位开发人员都应该学习的 5 种编程语言。\n\n\n\n学习 C++ 而不学习 C，就像学习 React.js 应用开发而不试验原生 JavaScript 和 DOM 一样——所以，先学习 C，然后进一步学习 C++，可以为你的编程生涯带来上面所有的好处。",
    "tag": ["c++", "language", "计算机科学","基础知识", "解决方案"],
    "url": "https://www.infoq.cn/article/Y9KJX5zaEXov90wK68JP",
    "publishDate": "2022-04-19",
    "status": "01",
    "src": "infoq"
  },
  {
    "id": "003",
    "title": "怎么让 Java 冷启动提速两个数量级",
    "summary": "Java 语言自从诞生以来就被打上了“慢”的标签。经过 25 年的发展，Java 程序的峰值性能在实时编译（JIT）技术的支持下已能超越 C/C++ 程序，但实时编译仍无法解决冷启动速度慢的问题。在云原生的场景下，往往需要快速拉起新的服务以响应用户持续增长的请求，此时服务的启动时间就显得至关重要。",
    "content": "阿里巴巴探索了两种不同维度上的冷启动加速技术，经过双 11 大促的检验都取得了良好的效果：AppCDS 技术在传统 Java 环境的维度上，利用类数据共享特性改进启动速度和减少内存开销；静态编译技术则在更为激进的维度上，将 Java 程序提前编译为二进制机器码，实现以 Native Code 的速度启动 Java 程序，带来最多两个数量级的启动性能提升。在 QCon 全球软件开发大会（2021）北京站上，阿里巴巴 JVM 团队技术专家林子熠博士介绍了这两种技术的特点和适用场景。我们整理了本次分享，以期帮你实现云原生场景下 Java 快速冷启动（下文以林子熠老师第一人称叙述）\n\n \n\nJava 诞生至今的 25 年里，凭借其峰值性能高、语言功能强、生态支持好等特点赢得了语言市场的霸主地位。但 Java 冷启动开销大，而云原生时代下的应用程序短小，启动频繁，冷启动问题的解决机不容发。\n\n \n\n冷启动问题根因及应对\n \n\n下图为典型 Java 应用的生命周期：\n\n \n\n\n\n如图，Java 应用生命周期分为 5 个阶段：VM 初始化阶段、APP 初始化阶段、APP 初活跃阶段、APP 稳定执行期、结束阶段。\n\n \n\nVM 初始化（图中红色）和 Class loading（图中蓝色）的开销为冷启动的根因。阿里巴巴实现了两类改造：一类为改良型技术，调整优化现有 Java 的框架和运行模型，另外一类为革新型的技术，摆脱原有 Java 框架另起炉灶。\n\nEagerAppCDS\n改良型技术中，阿里巴巴主要实现了基于传统 CDS（Class Data Sharing）的 EagerAppCDS。传统 CDS 包括 mark、Klass*、fields 三部分，如下图左所示：\n\n\n\n\n\n\nKlass*指针指向内存中 class 实例 InstanceKlass，该实例为 bytecode Class Loading 解析后生成的，但在多次解析时内容均不变，因此可固定存储磁盘文件 Shared Archive 中，下次运行时从文件中可省略解析直接读取，实现提速。\n\n \n\n面对 system class，CDS 可根据 name 快速匹配，但面对 customized class 时，JVM 无法辨认 customized class loader 的身份，因此需在 classpath 上扫描 jar 包，根据 name、crc 校验后方可完成匹配。jar 包即为 libs 包，包含大量 I/O 操作，开销大。EagerAppCDS 用 identity 固定了 customized class loader 的名字，可直接通过 identity+name 匹配找到所需 class。\n\n \n\n下图为 EagerAppCDS 在阿里巴巴内部实践的脱敏数据，如图所示性能提升效果从 12%~95%不等。\n\n\n\n\n\n\nEagerAppCDS 虽未开源但已在阿里云 SAE（Serverless 微服务 PaaS 平台）上线。线上可公开实测数据中应用启动耗时降低 5%~45%，提升效果与启动时加载类数量成正比。\n\n\n\n\n\n\n除此之外，我们还实现了以下改进型技术：\n\nJWarmup：共享预热后的 code cache，减小 JIT 开销；\n\nPGO AOT：提前准备 runtime 信息，指导改进 AOT 代码质量；\n\nClass Preinit：类预先初始化，降低运行时初始化类的开销。\n\n \n\nGraal VM 静态编译技术\n革新型技术中，阿里巴巴采用了基于 Graal VM 的静态编译技术。Graal VM 为 Oracle 主导的基于 Java 的开源高性能多语言平台：C++、Kotlin、python 等多种语言可通过 Truffle 框架运行在 GraalVM 上，Java 和其他 JVM 语言（如 Groovy、Kotlin 和 Scala 等）编译成 bytecode 后可直接运行。\n\n \n\nSubstrate VM（SVM）为 Graal VM 的静态编译组件，可将 Java 程序静态编译为可执行文件或共享库文件 Native Image，实现直接编译 Java 代码。\n\n \n\nJava 最初依靠解释器实现无需编译实时执行；该解释器性能较差，因此引入了 JIT（Just In Time）实时编译技术，将高热度函数送到编译器中编译；为解决编译器开销大的问题，引入了 AOT（Ahead Of Time）编译，提前编译部分代码；AOT 缺乏 runtime 数据，运行后即丧失转为 JIT 的机会，运行速度慢；静态编译技术将 AOT 扩大，彻底摒弃 JVM，由 SVM 提供运行环境。\n\n\n\n\n\n\n静态编译基本原理\n传统 Java 执行模型如下图左所示：Application（应用本身）在 libs 的支持下运行在 JDK 上在 JVM 中执行。\n\n\n\n\n\n\n静态编译在 Graal Compiler 编译器中编译 Application、libs、JDK，同时编译 Substrate VM Runtime，获得 Native Image。Native Image 包含 code（编译后的代码）和 Image heap（存储数据）两部分。Image heap 为运行时 heap 的起点，直接读取 Image heap 可以提高运行时的性能。\n\n \n\n静态编译必须遵循封闭性原则(the closed-world assumption)，即所有运行时信息均需在编译时可见。该原则带来两个基本问题：如何确定封闭的边界？如何处理 Java 的动态特性？\n\n \n\n静态分析\nJava bytecode 编译为 Native code 时，代码抽象性降低体积增大，如若编译所有代码，Native Image 体积将过于庞大，因此需确定封闭边界。SVM 通过静态分析上实现了从给定入口开始确定程序可达范围的功能。\n\n \n\n该技术应用广泛，例如 main 函数调用 Virtue call 必须先明确其 type，type 和 Virtue call 有时可唯一绑定，但通常不能唯一绑定。此时使用静态分析技术，可明确 Virtue call type 的可能范围，实现封闭。\n\n\n\n\n\n\n受静态分析本身的特性和能力所限，静态分析得到的可达代码集合（蓝色）略大于实际执行代码集合（绿色）。静态分析精度越高、冗余越少、image 越小。\n\n \n\n静态分析无法分析出 Java 的许多动态特性运行时的行为，如反射、动态代理、JNI、序列化（阿里巴巴贡献，从 21.0 开始支持）、动态类加载（阿里巴巴贡献，patch 已经通过评审）等。此时需提前获取所需信息，方可封闭此类动态特性的触达范围——即需基于配置进行动态特性支持。\n\n \n\n\n\n\n以反射为例。SVM 提供了 native-image-agent，可记录 APP 运行时所有的反射。编译时只需解析配置文件，即可注册反射目标，扩大编译范围；同时获取反射信息后可放入 ReflectionData 缓存中，将反射调用替换为直接调用。运行时如遇反射可查找 ReflectionData，获取目标值，通过 Method.invoke 直接调用目标函数。\n\n \n\n下图为通过静态编译和传统 Java 两种方式，分别用反射调用空函数 30 次性能对比测试结果：\n\n\n\n\n\n\n由于峰值过高，该图进行了对数修正。传统 Java 编译空函数耗时（深蓝色）为 3000ns，峰值由于反射开销为 4000ns，静态编译后（深蓝色）稳定在 150ns 内。\n\n \n\nSVM 的静态编译实现的编译优化包括标准优化如：Method inlining, constant folding and arithmetic optimization, loop optimization, partial escape analysis 等。\n\n此外还有因为静态分析而引入的新的编译优化，例如未被标为 final 的 field 通过静态分析发现只读不写，即可当作常量处理，做常量折叠等优化；又如，静态分析出某虚函数 type 唯一绑定，即可优化为直接调用，进而实现 inline；再如，消除部分编译时已知变量类型状态的类型检查和空指针检查。\n\n \n\n主要运行时组件\n静态编译由于所有的类均已被编译因此只有一个类加载器，实际只执行类查找功能。\n\n \n\n传统 Java 一边检查异常一边运行，如遇异常直接处理即可。SVM 考虑到在不同平台兼容性，异常处理采用非信号处理机制：检测无错方可正常运行。该检测对性能影响小。\n\n \n\n此外，静态编译的 GC 为 Oracle 开源版本中的单线程 stop-and-copy 顺序 GC，性能一般。\n\n\n\n性能对比-实验室数据\n下图为 Graal VM 官方的实验数据：\n\n \n\n\n\n\n如上图所示，在只执行 Hello world 程序时，Native Image 性能次于 C，与 Go 相当，远快于传统 JDK；内存使用次于 C，只有 Go 的一半，远低于传统 JDK，具有高性能低内存占用的优点。图中红色数据为受测语言数据除以 Native Image 数据所得比值。\n\n \n\n性能对比-实际场景数据\nJavac 为 Java 编写的编译器：可以在 Java 程序中来调用 API 编译，也可用 stand alone 工具编译。通过 API 调用，实际上已完成 VM 启动，因此两者对比可观察冷启动带来的性能差异。\n\n\n\n通过 API 调用 Javac 耗时 250ms，使用 Native Image 后耗时达到 35ms，实现了 1 个数量级的飞跃。\n\n \n\nJavac 中使用的反射、Serverless 较少，其他项目静态分析性能提升效果更加显著。下图为基于 spring boot 的应用 greeting-service 部署在阿里云函数计算平台上的数据。greeting-service 收到请求会返回“ hallo”，功能简单但需要 spring boot 全流程支持。\n\n \n\n\n\n\n如图所示，Native Image 静态编译（橙色）相比传统 Java（蓝色）：内存占用从 128MB 降至 21MB；实际第一次调用耗时从 454 ms 降至 4.27 ms，提升了两个数量级；阿里云服务计费从 500ms 降至 100ms，事半功倍。\n\n静态编译局限性\n\n\n\n\n\n静态编译的局限性如上表所示：\n\n为实现封闭性，反射、动态代理、JNI、序列化、动态类加载均需要通过配置支持；\n\n不支持 InvokeDynamic（开发人员使用）、Method Handles（开发人员使用）、Security Manager、多 classloader、Finalizers、过时 Thread 函数（如 Thread.stop()）等；\n\nJava 程序被静态编译后不再保留 bytecode，因此存在监控、调试方面的问题：不支持 JVMTI、JMX、agent，只能使用 GDB 调试，无法通过 Eclipse IDE、IntelliJ IDEA 等调试。\n\nGraalVM 生态发展\nGraalVM 静态编译目前生态如下：\n\n阿里云：通过阿里云函数计算平台进行支持部署 serverless Native Image 应用，通过 Apache RocketMQ 为 C++客户端提供使用静态编译的 Java 共享库；\n\nSpring 社区：发布了针对于静态编译 Spring-Native beta 版本，完全支持 Spring 的运算；\n\nMICRONAUT：实现了支持 Native Image 的去反射微服务框架；\n\nFacebook&Twitter：均在生产环境下使用 Graal 编译器代替 C2 编译器。\n\n \n\n总之，在 Serverless 场景下 Java 的冷启动问题与应用对快速响应、实时扩展的需求形成突出矛盾。阿里巴巴一方面在现有技术上不断改进，最终形成突破：EagerAppCDS 提升最多 45%的启动速度；另一方面积极参与开源社区探索创新型的前沿技术，打磨成熟用于实践：GraalVM 静态编译技术最多提升百倍启动速度。但 GraalVM 存在兼容性和改造成本的问题，适合新项目。\n\n \n\n嘉宾介绍\n\n林子熠，目前主要负责 Java 静态编译技术的开发与应用。2017 年于上海交通大学获得软件工程专业工学博士学位，攻读博士期间曾赴美国伊利诺伊大学香槟分校访学。毕业后一直从事 Java 静态编译方面的工作，曾于华为编译器与编程语言实验室参与方舟 Java 移动端静态编译器的研发。加入阿里巴巴集团后主要研究服务端 Java 程序的静态编译技术，致力于 Serverless 场景下静态编译的规模化应用、编程模型和标准探索，以及生态建设。在 2019 年的双 11 大促时小范围上线实验了静态编译的 sofa-boot 中间件应用，取得启动速度提升 20 倍，峰值性能和内存消耗与传统 Java 应用基本持平的良好效果。\n\n \n\n外部链接\n\nJava 应用的生命周期：https://shipilev.net/talks/j1-Oct2011-21682-benchmarking.pdf\n\nGraal VM 平台：https://www.graalvm.org/\n\n实际场景 Graal VM 测试应用源码: https://github.com/micronaut-projects/micronaut-spring/tree/master/examples/greeting-service\n\n实际场景 Graal VM 部署平台: https://www.aliyun.com/product/fc\n\n \n\n活动推荐\n\n2022 年 6 月 24-25 日，ArchSummit 全球架构师峰会（北京站·2021）即将落地北京，我们还策划了微服务治理之基础架构、微服务治理之业务架构、架构师成长、客户端架构设计、数据库与存储技术、云原生技术应用、质效度量体系和测试平台建设、低代码实践与应用、领域驱动设计方案落地、数字化转型之运维实践、推荐系统技术探索、机器学习与 AI 技术提能增效、Web 前端技术架构前沿实践、LakeHouse 架构演进与数据治理实践、高可用、高并发架构设计等专题，了解更多请扫描下方二维码。",
    "tag": ["java", "language", "语言","JIT", "阿里巴巴"],
    "url": "https://www.infoq.cn/article/5bSzES5j1o4EStydDjAQ",
    "publishDate": "2022-04-13",
    "status": "01",
    "src": "infoq"
  },
  {
    "id": "004",
    "title": "传阿里达摩院裁员30％，此前3年烧1000亿",
    "summary": "从去年年底开始，数个互联网大厂传出裁员传闻。\n\n　　据科技每日推送独家消息，阿里旗下达摩院，也加入了这次“毕业季”，预计将有三分之一的员工输送到社会。\n\n　　遥想 2017 年达摩院刚成立时，马云对它提出了“活得要比阿里巴巴长”这一要求。",
    "content": "从去年年底开始，数个互联网大厂传出裁员传闻。\n\n　　据科技每日推送独家消息，阿里旗下达摩院，也加入了这次“毕业季”，预计将有三分之一的员工输送到社会。\n\n　　遥想 2017 年达摩院刚成立时，马云对它提出了“活得要比阿里巴巴长”这一要求。\n\n\n\n　　很难想到 5 年后，达摩院就迎来这么一天。\n\n　　3 年投入 1000 亿\n\n　　达摩院要服务 20 亿人\n\n　　2017 年 10 月 11 日，阿里正式宣布成立达摩院，未来三年将投入将超过 1000 亿人民币，用于基础科学和颠覆式技术创新研究。\n\n　　首批加入的科学家，包括：\n\n　　中国量子力学第一人潘建伟\n\n　　中国唯一图灵奖获得者姚期智\n\n　　高性能计算和大数据领域权威学者江泓\n\n　　华人计算机体系结构领域代表学者谢源\n\n　　这些人，都是科学界“顶级大牛”。\n\n\n\n　　马云对达摩院提出了三个要求，除了“活得要比阿里巴巴长”，还有“服务全世界至少 20 亿人口”、“必须面向未来、用科技解决未来的问题”。\n\n　　在阿里官方宣传中，目前达摩院已经拿下了数十项全球第一，其中多个科研成果已直接应用，包括：\n\n　　遥感分析：遥感卫星影像分析，从 3 个月缩短至几分钟；\n\n　　人像识别：帮助全国找回几十个走失的老人与孩子；\n\n　　交通急救：在一次急救中，城市大脑帮助救护车在 7 公里内，节省通行时间 854 秒。\n\n　　此外，还有 AI 庭审、农业等方面的应用。但其中一些成果，大家颇有微词。\n\n　　2019 年华为被美国疯狂制裁之时，平头哥的各种宣传略显夸张，其首款芯片含光 800，号称算力相当于 10 个传统芯片。\n\n\n\n　　要知道连英特尔的 12 代芯片，对比 11 代的性能提升仅仅在 19%。含光 800 具体对比的是哪款传统芯片，达摩院到现在也没有说清。\n\n　　2020 年 8 月，达摩院发表了一篇论文，大致是通过改善模型，提升了饿了么外卖履约时间预估能力。\n\n\n\n　　然而到了 9 月份，饿了么便被爆出压榨骑手送餐时间，以至于外卖小哥在规定的时间内不一定能完成送餐，导致违规或者被平台处罚。\n\n\n\n　　2022 年 3 月，一张照片在自动驾驶技术人的朋友圈或群里，广为流传。\n\n　　阿里达摩院此前力推的自动驾驶物流小车“小蛮驴”，在某大学校园里，直接驶入了一片填埋时间不长的、湿漉漉的水泥地，当场翻车，引发学生们哄笑围观。\n\n\n\n　　一位业内人士吐槽：“这小车上装有国内某头部公司的 32 线激光雷达，竟然还能跑出这样的水平，佩服至极。\n\n　　内忧外困\n\n　　天价投入难以持续\n\n　　作为一家致力于探索科技未知，以人类愿景为驱动力的研究院。达摩院共参与4+X研究领域，旗下实验室高达 16 个。\n\n\n\n　　研究领域包括量子计算、机器学习、基础算法、网络安全、视觉计算、自然语言处理、人机自然交互、芯片技术、传感器技术、嵌入式系统等，涵盖机器智能、智联网、金融科技......\n\n　　这些，都是当今最热门的领域，只不过每一项都投资不菲，而且距离盈利相当遥远。\n\n　　3 年投入 1000 亿，均摊下来一年则为 333.33 亿——这已经超过了去年国内任何一家大学总经费。\n\n\n\n　　前些年阿里高歌猛进之时，这些投入压力并不算很大。\n\n　　但随着近两年股价暴跌、天价罚款以及拼多多崛起等因素影响，降本增效成了阿里必须着重考虑的一个点。\n\n　　阿里最新财报显示，营收中 86% 由电商提供，9% 由阿里云提供，4% 来自阿里大文娱，而包括达摩院在内的“高科技领域”占比只有1%。\n\n\n\n　　在经费大量收缩的情况下，想要维持原有团队成了件相当困难的事。\n\n　　自负盈亏\n\n　　技术与商业如何平衡\n\n　　其实，在这次向社会输送人才之前，达摩院已经开始自负盈亏了。\n\n　　不少网友透露，达摩院每天都在接业务做，只有这样才能赚钱，“更像是高级外包，外面把一些有点技术难度的工程外包给达摩院”。\n\n\n\n　　这是一个相当矛盾的操作。\n\n　　真正的基础研究，很难短期看到成果甚至盈利。包括华为、英特尔、英伟达、微软、谷歌在内的全球科技巨头，研究所都是亏钱搞技术，最后再通过其他部门将技术商业化来盈利。\n\n　　而自负盈亏，就需要研究院在现实中进行挣扎，进行一些短平快的项目。\n\n　　换句话说，如今的达摩院已非纯科研机构，只是比其他部门更偏学术一点，但业务也不少。\n\n　　难怪，在这两年美国“盖章”的高科技企业、机构中，没有达摩院的存在。\n\n\n\n　　而过去半年数位达摩院“大牛”离职，或许也是因为难以平衡技术和商业。\n\n　　2021 年 11 月，前蚂蚁金服副总裁、蚂蚁 AI 首席科学家、蚂蚁金服人工智能部负责人、达摩院金融智能负责人漆远，加盟复旦大学。\n\n　　2022 年 1 月，阿里副总裁、阿里达摩院自动驾驶实验室负责人王刚离职。\n\n　　当然，互联网公司在前沿技术上的大量投入，与短期见不到商业落地的矛盾到哪都存在。\n\n　　自动驾驶龙头 Waymo，机器人行业领导者波士顿动力，开发了 AlphaGo 的 DeepMind。\n\n　　这三个都是或曾经是谷歌旗下研究所，但如今，第一个早已独立融资，第二已经转卖好几次，第三个则与谷歌几近闹翻。\n\n　　现在只能期待，达摩院能找到一条技术和商业的平衡之法，待到时机扭转之时，再一飞冲天。",
    "tag": ["互联网", "裁员", "科技", "阿里巴巴"],
    "url": "https://news.cnblogs.com/n/719121/",
    "publishDate": "2022-04-20",
    "status": "01",
    "src": "cnblogs"
  }
]